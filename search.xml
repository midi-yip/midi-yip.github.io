<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>终于东拼西凑了只星际蜗牛的J1900</title>
      <link href="/2023/03/08/j19000306/"/>
      <url>/2023/03/08/j19000306/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎使用-54屋-44444o-博客"><a href="#欢迎使用-54屋-44444o-博客" class="headerlink" title="欢迎使用 {54屋}(44444o)博客"></a>欢迎使用 <strong>{54屋}(44444o)博客</strong></h2><p>手上用了只J4125的小主机做了个all in one,但使用起来总感觉受到其它系统的影响，就想着再单独弄一只NAS来折腾。<br>    论坛逛了一大圈，再看看各大神的组装推荐，自己要求也不高，想着自己也弄个外壳，再弄些电源、主板来组装吧！平台逛了大圈，一合计比直接买整机还贵（可能没找对）。所以直接就拼夕夕了。<br>    然后就各种凑配件了</p><h3 id="1、拼夕夕入手星际蜗牛B款主机（机箱的标应该是万由的吧）"><a href="#1、拼夕夕入手星际蜗牛B款主机（机箱的标应该是万由的吧）" class="headerlink" title="1、拼夕夕入手星际蜗牛B款主机（机箱的标应该是万由的吧）"></a>1、拼夕夕入手星际蜗牛B款主机（机箱的标应该是万由的吧）</h3><blockquote><p>趁着百亿补贴的车，跟上一波（也不是知道是在车的哪个位置）<br>![星际蜗牛主机]<br><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1678183850755.png"></p></blockquote><blockquote><p>入手的是单网口，默认是4G内存，60G硬盘，如果你想一步到位的话，那直接上8G内存吧(它最大支持8G），硬盘也可以自己重新配置！</p></blockquote><h3 id="2、重新购入的内存条"><a href="#2、重新购入的内存条" class="headerlink" title="2、重新购入的内存条"></a>2、重新购入的内存条</h3><p>![8G内存]</p><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1678183850805.png"><br>换了8G的，原来4G的就压手上了！</p></blockquote><h3 id="3、购买时咨询商家说是买到上盘就能用，原来是引导跟系统安装在同一盘上（反正我也不会），但插了网线一直搜索不到IP，就自己重新刷过。"><a href="#3、购买时咨询商家说是买到上盘就能用，原来是引导跟系统安装在同一盘上（反正我也不会），但插了网线一直搜索不到IP，就自己重新刷过。" class="headerlink" title="3、购买时咨询商家说是买到上盘就能用，原来是引导跟系统安装在同一盘上（反正我也不会），但插了网线一直搜索不到IP，就自己重新刷过。"></a>3、购买时咨询商家说是买到上盘就能用，原来是引导跟系统安装在同一盘上（反正我也不会），但插了网线一直搜索不到IP，就自己重新刷过。</h3><blockquote><p>箱底翻到一张2G的内存卡，购入读卡器，重新刷写引导。<br>开始准备是外置的，特意买了个小的，后面拆了机器后发现上板上内置有两个USB口，刚好。<br>![引导U盘]<br><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1678183850421.png"></p></blockquote><h3 id="4、添加存储"><a href="#4、添加存储" class="headerlink" title="4、添加存储"></a>4、添加存储</h3><blockquote><p>买512G固态硬盘本是计划来安装应用，但看空出了60G的自带盘，就把它搁置了。<br>还给它上了两块4T的，也不知道有没那么多小姐姐放。<br>![添加储存]<br><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1678183850826.png"></p></blockquote><h3 id="5、机器启动后发现风扇一直全速运转，声音也大，最后还是靠箱底。（外包装都还没拆，也不知道当时买来要做什么的）"><a href="#5、机器启动后发现风扇一直全速运转，声音也大，最后还是靠箱底。（外包装都还没拆，也不知道当时买来要做什么的）" class="headerlink" title="5、机器启动后发现风扇一直全速运转，声音也大，最后还是靠箱底。（外包装都还没拆，也不知道当时买来要做什么的）"></a>5、机器启动后发现风扇一直全速运转，声音也大，最后还是靠箱底。（外包装都还没拆，也不知道当时买来要做什么的）</h3><blockquote><p>应该是可以直接上温控风扇的，反正手上都有模块就一起接上了。<br>![温控风扇]<br><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1678183850927.png"></p></blockquote><h3 id="6、它的STAT线，太硬了，一直顶着主板，正在入手新的来替换。"><a href="#6、它的STAT线，太硬了，一直顶着主板，正在入手新的来替换。" class="headerlink" title="6、它的STAT线，太硬了，一直顶着主板，正在入手新的来替换。"></a>6、它的STAT线，太硬了，一直顶着主板，正在入手新的来替换。</h3><h2 id="一整套就这样拼凑出来了"><a href="#一整套就这样拼凑出来了" class="headerlink" title="一整套就这样拼凑出来了"></a>一整套就这样拼凑出来了</h2>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
            <tag> 星际蜗牛 </tag>
            
            <tag> NAS </tag>
            
            <tag> 群晖 54屋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>glados简单的注册使用教程</title>
      <link href="/2023/03/01/glados20230301/"/>
      <url>/2023/03/01/glados20230301/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎使用-54屋-44444o-博客"><a href="#欢迎使用-54屋-44444o-博客" class="headerlink" title="欢迎使用 {54屋}(44444o)博客"></a>欢迎使用 <strong>{54屋}(44444o)博客</strong></h2><pre><code>也不记得是什么时候使用过它的产品，有一天邮件突然弹出了推广信息，发现是送流量的，就进去试了下，然后就一直用它家的了。网上也搜索了相关的信息，它对注册过的用户有不定期做推广。</code></pre><p>一、注册地址</p><blockquote><p>看介绍是要通过GITHUB项目上的链接进行激活才有用</p></blockquote><blockquote><p>(注册地址在 <a href="https://github.com/glados-network/GLaDOS" target="_blank" rel="noopener">https://github.com/glados-network/GLaDOS</a> 实时更新), 并输入<br>邀请码:[E98IZ-V5M8V-FHLZU-6YCOC] 激活。<br>获得三天的试用，也可以通过每日签到来延续时长，当应急之需吧！</p></blockquote><h2 id="入口在页面最下方处"><a href="#入口在页面最下方处" class="headerlink" title="入口在页面最下方处"></a>入口在页面最下方处</h2><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677404249181.png"></p></blockquote><h2 id="通过邮箱注册，点击send-passcode-to-email发送验证码到你的邮箱来进行注册"><a href="#通过邮箱注册，点击send-passcode-to-email发送验证码到你的邮箱来进行注册" class="headerlink" title="通过邮箱注册，点击send passcode to email发送验证码到你的邮箱来进行注册"></a>通过邮箱注册，点击send passcode to email发送验证码到你的邮箱来进行注册</h2><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677634297402.png"><br><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677634297376.png"></p></blockquote><blockquote><p>输入邀请码:[E98IZ-V5M8V-FHLZU-6YCOC] 进行激活</p></blockquote><h2 id="会员签到"><a href="#会员签到" class="headerlink" title="会员签到"></a>会员签到</h2><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677635183801.png"></p></blockquote><h2 id="注册后按流程下载软件进行登陆，如果需要手机或是路由端的，那需要再进行申请。"><a href="#注册后按流程下载软件进行登陆，如果需要手机或是路由端的，那需要再进行申请。" class="headerlink" title="注册后按流程下载软件进行登陆，如果需要手机或是路由端的，那需要再进行申请。"></a>注册后按流程下载软件进行登陆，如果需要手机或是路由端的，那需要再进行申请。</h2><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677404249188.png"><br><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677404249148.png"></p></blockquote><h2 id="请遵守相关使用规定"><a href="#请遵守相关使用规定" class="headerlink" title="请遵守相关使用规定"></a>请遵守相关使用规定</h2><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677404609556.png"></p></blockquote><blockquote><p>一般开启SYSTEM PROXY就可以了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 54屋 </tag>
            
            <tag> glados </tag>
            
            <tag> 梯子 </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用群晖搭建CHATGPT对接WECHAT机器人</title>
      <link href="/2023/02/25/chatGPT/"/>
      <url>/2023/02/25/chatGPT/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎使用-54屋-44444o-博客"><a href="#欢迎使用-54屋-44444o-博客" class="headerlink" title="欢迎使用 {54屋}(44444o)博客"></a>欢迎使用 <strong>{54屋}(44444o)博客</strong></h2><p>群晖搭建方法<br>在群晖的Docker文件目录里（一般是/docker/XXX/），自己定义，文件夹里新建一个文本文档，输入以下内容，并重命名为config.ts，并且在文件里面修改成你的OpenAPI。</p><h1 id="预防被封号建议用小号进行测试"><a href="#预防被封号建议用小号进行测试" class="headerlink" title="[预防被封号建议用小号进行测试]"></a>[预防被封号建议用小号进行测试]</h1><pre><code>export default {  // 填入你的session token  OPENAI_API_KEY: &apos;&apos;,  // 设置获取消息的重试次数  retryTimes: 3,  // 在群组中设置唤醒微信机器人的关键词  groupKey: &apos;&apos;,  // 在私聊中设置唤醒微信机器人的关键词  privateKey: &apos;&apos;,  // 重置上下文的关键词，如可设置为reset  resetKey: &apos;reset&apos;,  // 开启会后收到ChatGPT的自动回复  autoReply: true,  // 根据正则匹配是否自动通过好友验证  friendShipRule: /chatgpt|chat/,  // 是否在群聊中按照回复的格式进行回复  groupReplyMode: true,  // 是否在私聊中按照回复的格式进行回复  privateReplyMode: false,};</code></pre><p>如果用的不是微信小号，最好也设置一个唤醒词，避免打扰到别人。</p><p>搜索并下载Docker映像suyunkai46/chatgpt-wechat</p><p>新增容器，选择下载的镜像部署，需要把下载的config.ts文件挂载到容器内/code/src/config.ts路径上，其余设置均默认即可。</p><p>进入容器终端机，依次输入三条指令：</p><pre><code>npm install -g pm2pm2 start npm -- run devpm2 logs</code></pre><p>npm install -g pm2只有刚搭建完后需要输入一次，以后再也不用输入了</p><pre><code>每次重新启动容器，都需要控制台手动输入一次pm2 start npm -- run dev，才能启动程序  随时可以输入pm2 logs查看日志记录获取微信二维码</code></pre><blockquote><p>##通过微信扫码即可登陆，然后给登陆的微信号发消息，就可以愉快的调戏ChatGPT了。<br>![扫描二维码]<img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677318905978.png"></p></blockquote><pre><code>错位了刷新多几次就好了。</code></pre><h1 id="预防被封号建议用小号进行测试-1"><a href="#预防被封号建议用小号进行测试-1" class="headerlink" title="预防被封号建议用小号进行测试"></a>预防被封号建议用小号进行测试</h1>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OPENAI </tag>
            
            <tag> chatGPT </tag>
            
            <tag> 54屋 </tag>
            
            <tag> WECHAT </tag>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于OPENAI注册验证问题</title>
      <link href="/2023/02/25/SMS-Activalte20230225/"/>
      <url>/2023/02/25/SMS-Activalte20230225/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎使用-54屋-44444o-博客"><a href="#欢迎使用-54屋-44444o-博客" class="headerlink" title="欢迎使用 {54屋}(44444o)博客"></a>欢迎使用 <strong>{54屋}(44444o)博客</strong></h2><pre><code>ChatGPT（全名：Chat Generative Pre-trained Transformer），美国OpenAI [1]  研发的聊天机器人程序 [12]  ，于2022年11月30日发布 [2-3]  。ChatGPT是人工智能技术驱动的自然语言处理工具，它能够通过学习和理解人类的语言来进行对话，还能根据聊天的上下文进行互动，真正像人类一样来聊天交流，甚至能完成撰写邮件、视频脚本、文案、翻译、代码，写论文 [21]  等任务。很火的项目，很多小伙伴都想体验，但鉴于大陆区域暂不支持而导致止步。现整理了体验需要的几样东西给大伙。</code></pre><p>想要使用ChatGPT,首先得要注册OPENAI的账号，但因区域限制大陆区暂时不支持，所以我们需要用到以下几种功能：<br>    1、因不支持大陆区域所以部份操作需要用上”科学上网”进行访问<br>    2、还是因为不支持大陆区域所以需要用到其它地区的号码进行验证(我是使用<a href="https://sms-activate.org/?ref=4950355" target="_blank" rel="noopener">https://sms-activate.org/?ref=4950355</a> SMS-Activate(点击直达）)<br>    3、前两点准备好后我们可以开始在<a href="http://www.openai.com进行账号注册" target="_blank" rel="noopener">www.openai.com进行账号注册</a><br>一、科学上网<br>    如果你已经有账号了那都可以忽略掉了，<br>    如果没有的话可以通过下面的邀请获得试用体验<br>    关于科学上网的注册GLaDOS</p><blockquote><p>(注册地址在 <a href="https://github.com/glados-network/GLaDOS" target="_blank" rel="noopener">https://github.com/glados-network/GLaDOS</a> 实时更新), 并输入<br>邀请码:[E98IZ-V5M8V-FHLZU-6YCOC] 激活。<br>能得三天的试用时间，应急之需吧！</p></blockquote><h1 id="入口在页面最下方处"><a href="#入口在页面最下方处" class="headerlink" title="入口在页面最下方处"></a>入口在页面最下方处</h1><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677404249181.png"></p></blockquote><h1 id="注册后按流程下载软件进行登陆"><a href="#注册后按流程下载软件进行登陆" class="headerlink" title="注册后按流程下载软件进行登陆"></a>注册后按流程下载软件进行登陆</h1><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677404249188.png"><br><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677404249148.png"></p></blockquote><h1 id="OPENAI需要使用全局"><a href="#OPENAI需要使用全局" class="headerlink" title="OPENAI需要使用全局"></a>OPENAI需要使用全局</h1><blockquote><p><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677404609556.png"></p></blockquote><p>二、注册过程会提示需要进行验证，因为大陆区域暂不支持，所以我们也需要利用一些代理，因为能切换中文使用上来也不麻烦。<br>    这里给大家推荐</p><blockquote><p><a href="https://sms-activate.org/?ref=4950355" target="_blank" rel="noopener">https://sms-activate.org/?ref=4950355</a> SMS-Activate(点击直达）,<br>它提供付费临时号码，价格也不高，使用时间为20分钟上，正常两分钟内能收到验证码。<br>（遇到个尴尬的，在注册T电报账号时用了印度、印尼两个号码都收不到验证码）</p></blockquote><p>![科学上网]<img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677308494950.png"><br>需要注意：点击购物车添加会提示余额不足，可以从右上角先进行充值（最低是1美元）好在它支持[支付宝]，这也给我们提供了方便！<br>![SMS-Activate]<img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677308494988.png"><br>三、所有东西准备好后我们就可以开始进行OPANAI注册了,不然会出现下面这样的情况。<br>         ![OPENAI注册]<img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677308494991.png"></p><h1 id="获取虚拟号码-登陆代理-OPENAI进行注册"><a href="#获取虚拟号码-登陆代理-OPENAI进行注册" class="headerlink" title="获取虚拟号码-登陆代理-OPENAI进行注册"></a>获取虚拟号码-登陆代理-OPENAI进行注册</h1><p>简单的记录下，都有中文，觉得也没那么复杂。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OPENAI </tag>
            
            <tag> chatGPT </tag>
            
            <tag> SMS-Activate </tag>
            
            <tag> 54屋 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>you-get安装及使用步骤</title>
      <link href="/2023/02/24/you-get20230224/"/>
      <url>/2023/02/24/you-get20230224/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎使用-54屋-44444o-博客"><a href="#欢迎使用-54屋-44444o-博客" class="headerlink" title="欢迎使用 {54屋}(44444o)博客"></a>欢迎使用 <strong>{54屋}(44444o)博客</strong></h2><pre><code>you-get一个基于Python开发的一个开源工具，通过几条命令就可以从WEB网站下载媒体内容。</code></pre><p>一、you-get 安装<br>需要以下依赖：<br>    Python 3.2及以上版本<br>    FFmpeg 1.0及以上版本<br>    RTMPDump（可选，非必须安装）</p><p>  Python安装：<br>  去官网下载Python安装包，要求Python版本需要在3.2及以上，下图直接安装最新版。<br>  官网下载地址：<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">https://www.python.org/downloads/</a><br>  一般一默认操作就可以。<br>  完成后我们打开 CMD命令窗口，通过Python -v 命令来查看是否安装成功。<br>二、PyPI（Python Package Index ），其实表示的是 Python 的 Packag 索引，这个也是 Python 的官方索引。 你需要的包（Package）基本上都可以从这里面找到。<br>  1.you-get的官方版本是在PyPI上发布的，可以通过Python自带的pip包管理器轻松地从PyPI镜像安装。</p><pre><code>注意，必须使用Python 3版本的pip，前缀需要写成pip3:通过pip3 install you-get命令安装you-get</code></pre><p>  2.安装you-get的过程中你可能会遇到如下图所示的问题，意思是Python的pip管理包版本需要升级到22.0.3版本。<br>  需要的话按命令提示进行升级就可以了</p><pre><code>在cmd命令行输入：python -m pip install --upgrade pip    </code></pre><p>  3.pip更新完之后，重新输入：pip3 install you-get 命令，安装you-get<br>  4.通过Python的pip管理包工具直接下载安装FFmpeg，输入pip3 install ffmpeg 命令进行安装。</p><pre><code>FFmpeg：FFmpeg是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的。</code></pre><p>三、you-get 常用命令<br>————————————————<br>// 查看you-get版本<br>you-get –version<br>缩写：you-get -V</p><p>// 查看帮助<br>you-get –help<br>缩写：you-get -h</p><p>// 查看Web网站媒体资源信息<br>you-get –info [url]<br>缩写：you-get -i [url]</p><p>// 下载Web网站媒体资源，默认以最高清晰度下载<br>you-get [url]</p><p>// 下载Web网站媒体资源，指定清晰度下载<br>you-get –format=[资源清晰度] [url]<br>缩写：you-get -F=[资源清晰度] [url]<br>————————————————</p><p>四、配置cookies<br>有些网站需要登录才能下载完整版视频，而且有些还需要会员账号才能下载<br>根据官方给出的文档，目前只支持火狐浏览器和Netscape浏览器的cookies，这里以火狐浏览器为例，进行配置cookies。</p><p>1.下载安装火狐浏览器<br>官网：<a href="http://www.firefox.com.cn" target="_blank" rel="noopener">http://www.firefox.com.cn</a></p><p>2.登录视频网站<br>用账号登录视频网站，如果要下载会员视频，前提你得有会员账号，网站需要先登录账号，获取网站登录的cookies，即可在命令行下载会员视频了。</p><p>3.找到cookies文件位置<br>这里以火狐浏览器为例，火狐浏览器的cookies文件cookies.sqlite 位置默认在C:\Users\pc\AppData\Roaming\Mozilla\Firefox\Profiles下，在Profiles里面搜索cookies.sqlite就可以找到，其中pc是自己的用户名。</p><p>4.下载视频<br>通过输入命令 you-get –cookies=[COOKIES_FILE所在位置以及文件名] [url] 即可下载完整版或者会员视频<br>————————————————<br>版权声明：本文为CSDN博主「lywStuding」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/lywstuding/article/details/123055697" target="_blank" rel="noopener">https://blog.csdn.net/lywstuding/article/details/123055697</a></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 54屋 </tag>
            
            <tag> you-get </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于ESXI7.0直通USB设置</title>
      <link href="/2023/02/22/exsi-usb20230222/"/>
      <url>/2023/02/22/exsi-usb20230222/</url>
      
        <content type="html"><![CDATA[<h2 id="欢迎使用-54屋-44444o-博客"><a href="#欢迎使用-54屋-44444o-博客" class="headerlink" title="欢迎使用 {54屋}(44444o)博客"></a>欢迎使用 <strong>{54屋}(44444o)博客</strong></h2><pre><code>弄了个ALL IN ONE，但NAS识别不到USB，在EXSI查看时发现它的状态是灰色的，我们需要来开启它。</code></pre><p>前面忘了截图了，这个是我开启后的状态。<br>![前面忘了截图了，这个是我开启后的状态]<img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677056729294.png"></p><p>首先、我们需要设备ID、供应商ID，这个可以USB控制器这边来直接获取。<br>![设备ID、供应商ID]<img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677056729314.png"></p><p>其次、通过管理界面来启用SHELL。<br>![启用SSH]<img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1677056708845.png"></p><p>第三、通过命令找到对应路径来添加直通代码，或是直接WINSCP直接找到相应路径编辑。<br><a class="xsj_anchor xsj_anchor_range xsj_anchor_range_start" name="xsj_1677056625439"></a><br>     【vi /etc/vmware/passthru.map】</p><p>第四、通过 【i】命令切入在编辑框里添加以下代码</p><pre><code>【# Pentium Silver Processor USB 3.0 xHCI Controller】【8086  a10d  d3d0   default】 【其中8086是供应商ID a10d是设备ID d3d0和default固定值 】</code></pre><p>最后保存退出并重启EXSI。</p><pre><code>【esc】【:wq】</code></pre><p>重启后别忘了去做直通切换。</p><p>如果是有多个硬盘，多个SATA控制器，也可以试着用这方法来添加直通。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 54屋 </tag>
            
            <tag> EXSI </tag>
            
            <tag> USB直通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JD京豆自助流程</title>
      <link href="/2023/02/17/new20230216/"/>
      <url>/2023/02/17/new20230216/</url>
      
        <content type="html"><![CDATA[<p>看到网上很多都自己搭建了青龙面板，也跟风弄了一个。<a href="http://mirouter.iok.la" target="_blank" rel="noopener"> http://mirouter.iok.la/ </a>操作也比较简单，网上教程也都齐全，只要把你获得的COOKIE按要求填入提交就算完成。<br>1、获取京东COOKIE<br>     使用浏览器访问m.jd.com,通过开发者模式（F12)的network标签来获取你的COOKIE。<br>2、提交COOKIE<br>通过面板的便捷方式直接把你的获得的值填入并提交，但因COOKIE的时效性，我们需要给它设置下面的自动更新转换功能了（wsck)。<br>3、提交WSCK<br>wsck提取教程可直接百度,一般用的都是这些APP（安卓：小黄鸟工具、VNET软件，IOS：stream），提取完成后依然到面板进行提交，就不用担心失效而自助停止了。<br><img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1676855653956.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JD </tag>
            
            <tag> 京东 </tag>
            
            <tag> 京豆 </tag>
            
            <tag> 自助签到 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>火树银花</title>
      <link href="/2023/02/17/%E7%81%AB%E6%A0%91%E9%93%B6%E8%8A%B1/"/>
      <url>/2023/02/17/%E7%81%AB%E6%A0%91%E9%93%B6%E8%8A%B1/</url>
      
        <content type="html"><![CDATA[<p>![火树银花] <img src="https://raw.githubusercontent.com/midiyc/img.github.io/main/share/1676628099180.png"></p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 烟花 </tag>
            
            <tag> 元宵 </tag>
            
            <tag> 火树银花 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git创建分支并推送到远程分支</title>
      <link href="/2019/03/12/new-branch/"/>
      <url>/2019/03/12/new-branch/</url>
      
        <content type="html"><![CDATA[<h2 id="菜鸟的记录"><a href="#菜鸟的记录" class="headerlink" title="菜鸟的记录"></a>菜鸟的记录</h2><h3 id="新建远程分支"><a href="#新建远程分支" class="headerlink" title="新建远程分支"></a>新建远程分支</h3><p>新建一个本地分支：</p><p>$ git checkout -b dbg_lichen_star<br>查看一下现在的分支状态:</p><p>$ git branch</p><ul><li>dbg_lichen_star<br>master<br>release<br>星号(*)表示当前所在分支。现在的状态是成功创建的新的分支并且已经切换到新分支上。</li></ul><p>把新建的本地分支push到远程服务器，远程分支与本地分支同名（当然可以随意起名）：</p><p>$ git push origin dbg_lichen_star:dbg_lichen_star<br>使用git branch -a查看所有分支，会看到remotes/origin/dbg_lichen_star这个远程分支，说明新建远程分支成功。</p><p>删除远程分支<br>我比较喜欢的简单方式，推送一个空分支到远程分支，其实就相当于删除远程分支：</p><p>$ git push origin :dbg_lichen_star<br>也可以使用：</p><p>$ git push origin –delete dbg_lichen_star<br>这两种方式都可以删除指定的远程分支</p>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> 分支 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>世界，你好！</title>
      <link href="/2019/03/05/hello-world/"/>
      <url>/2019/03/05/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="菜鸟的记录"><a href="#菜鸟的记录" class="headerlink" title="菜鸟的记录"></a>菜鸟的记录</h2><h2 id="注意层跟空格"><a href="#注意层跟空格" class="headerlink" title="注意层跟空格"></a>注意层跟空格</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">因为一个层结构导致一直</span><br><span class="line">You should configure deployment settings <span class="keyword">in</span> _config.yml first!</span><br><span class="line">无语无语！！</span><br></pre></td></tr></table></figure><p>1.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">如果系统中有一些配置文件在服务器上做了配置修改,然后后续开发又新添加一些配置项的时候,</span><br><span class="line">在发布这个配置文件的时候,会发生代码冲突:</span><br><span class="line"></span><br><span class="line">error: Your <span class="built_in">local</span> changes to the following files would be overwritten by merge:</span><br><span class="line">        protected/config/main.php</span><br><span class="line">Please, commit your changes or stash them before you can merge.</span><br><span class="line">如果希望保留生产服务器上所做的改动,仅仅并入新配置项, 处理方法如下:</span><br><span class="line">git stash 会把所有未提交的修改（包括暂存的和非暂存的）都保存起来，</span><br><span class="line">用于后续恢复当前工作目录。</span><br><span class="line">https://www.cnblogs.com/tocy/p/git-stash-reference.html</span><br><span class="line">比如下面的中间状态，通过git stash命令推送一个新的储藏，当前的工作目录就干净了。</span><br><span class="line">需要说明一点，stash是本地的，不会通过git push命令上传到git server上。</span><br><span class="line">实际应用中推荐给每个stash加一个message，用于记录版本，使用git stash save取代git stash命令。</span><br><span class="line">git pull 命令的作用是：取回远程主机某个分支的更新，再与本地的指定分支合并</span><br><span class="line">git stash pop 可以通过git stash pop命令恢复之前缓存的工作目录，这个指令将缓存堆栈中的第一个stash删除，</span><br><span class="line">并将对应修改应用到当前的工作目录下。</span><br></pre></td></tr></table></figure></p><p>2.放弃本地修改,直接覆盖之<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p><h2 id="本地与远程关联"><a href="#本地与远程关联" class="headerlink" title="本地与远程关联"></a>本地与远程关联</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">最近使用git pull的时候多次碰见下面的情况：</span><br><span class="line"></span><br><span class="line">There is no tracking information <span class="keyword">for</span> the current branch.</span><br><span class="line">Please specify <span class="built_in">which</span> branch you want to merge with.</span><br><span class="line">See git-pull(1) <span class="keyword">for</span> details.</span><br><span class="line"></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to <span class="built_in">set</span> tracking information <span class="keyword">for</span> this branch you can <span class="keyword">do</span> so with:</span><br><span class="line"></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/&lt;branch&gt; release</span><br><span class="line"></span><br><span class="line">其实，输出的提示信息说的还是比较明白的。</span><br><span class="line"></span><br><span class="line">使用git在本地新建一个分支后，需要做远程分支关联。如果没有关联，git会在下面的操作中提示你显示的添加关联。</span><br><span class="line"></span><br><span class="line">关联目的是在执行git pull, git push操作时就不需要指定对应的远程分支，你只要没有显示指定，git pull的时候，就会提示你。</span><br><span class="line"></span><br><span class="line">解决方法就是按照提示添加一下呗：</span><br><span class="line"></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream-to=origin/remote_branch  your_branch</span><br><span class="line"></span><br><span class="line">其中，origin/remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支。</span><br></pre></td></tr></table></figure><h2 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ 后台绑定域名后每次hexo d 都会解绑域名，直接在<span class="built_in">source</span>文件里面添加CNAME文件后生成上传。</span><br></pre></td></tr></table></figure><h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">推送代码分支时出现：fatal: <span class="string">'origin'</span> does not appear to be a git repository</span><br><span class="line">  输入$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git </span><br><span class="line"></span><br><span class="line">如果输入$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git </span><br><span class="line"></span><br><span class="line">    提示出错信息：fatal: remote origin already exists.</span><br><span class="line">    解决办法如下：</span><br><span class="line">    输入$ git remote rm origin 再执行</span><br></pre></td></tr></table></figure><h3 id="上传文件到分支问题"><a href="#上传文件到分支问题" class="headerlink" title="上传文件到分支问题"></a>上传文件到分支问题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在用主题是不是传不上到分支呢？</span><br><span class="line">执行 git add .      与   git  commit -m <span class="string">" "</span></span><br><span class="line">再执行 git push origin dev（分支）</span><br><span class="line">还是上不去。</span><br><span class="line">网上搜索在另一个博客上看到的方法：</span><br><span class="line">将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</span><br><span class="line">可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗？</span><br><span class="line">很简单，需要更新主题时在另一个地方git <span class="built_in">clone</span>下来该主题的最新版本，然后将内容拷到当前主题目录即可</span><br></pre></td></tr></table></figure><h3 id="提交到分支"><a href="#提交到分支" class="headerlink" title="提交到分支"></a>提交到分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">后执行git add .、git commit -m <span class="string">'back up hexo files'</span>（引号内容可改）、git push</span><br><span class="line"></span><br><span class="line">其中遇到的说是分库过多！</span><br><span class="line"></span><br><span class="line">fatal: The current branch dev has no upstream branch.</span><br><span class="line">To push the current branch and <span class="built_in">set</span> the remote as upstream, use</span><br><span class="line"></span><br><span class="line">    git push --<span class="built_in">set</span>-upstream origin dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">***移走了themes中的.git，但还是上传不上去，源码中的修改的*MD文件倒是更新了。***</span><br></pre></td></tr></table></figure><h2 id="在其它电脑更新博客"><a href="#在其它电脑更新博客" class="headerlink" title="在其它电脑更新博客"></a>在其它电脑更新博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">将新电脑的生成的ssh key添加到GitHub账户上</span><br><span class="line">在新电脑上克隆username.github.io仓库的xxx分支到本地，此时本地git仓库处于xxx分支</span><br><span class="line">切换到username.github.io目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉  node_modules文件夹的，</span><br><span class="line">也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</span><br><span class="line"></span><br><span class="line">编辑、撰写文章或其他博客更新改动</span><br><span class="line">依次执行git add .、git commit -m <span class="string">'back up hexo files'</span>（引号内容可改）、git push指令，保证xxx分支版本最新</span><br><span class="line">执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！</span><br><span class="line">** 注意： 每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先git pull**</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
